import sys
import spacy
import nltk
import re
import gensim
import csv
from importlib import reload
import nltk
nltk.download('words')
import collections
import pandas as pd
import numpy as np
# Modules for text preprocessing
from stop_words import get_stop_words
from gensim import corpora
from nltk.tokenize import word_tokenize
from nltk.stem.porter import PorterStemmer
from nltk.stem.wordnet import WordNetLemmatizer
nltk.download('stopwords')
nltk.download('averaged_perceptron_tagger') # For POS tagging
nltk.download('wordnet')
import nltk
nltk.download('punkt')
import argparse
from collections import OrderedDict

class clean_csv(object):
    def __init__(self, csv):
        #del csv['time']
        #del csv['channel']
        #del csv['user']
        #del csv['session']
        self.csv = csv
        print(self.csv)

        #Fant√°stico! Seu pedido j√° est√° na transportadora. 
        #Voc√™ receber√° at√© o dia ##/##/####,
        #Escreva *o n√∫mero* da op√ß√£o desejada,
        #1 - Acompanhar a entrega do seu √∫ltimo Pedido
        #2 - Consultar a data da pr√≥xima entrega
        #3 - Consultar d√©bito ou segunda via de boleto
        #4 - Consultar pontua√ß√£o do Meu Mundo [[COMPANY_NAME]]
        #5 - Novo Modelo de Neg√≥cio [[COMPANY_NAME]]
        #6 - Outros assuntos
        #6 - Consultar uma Revendedora da equipe
        #7 - Alterar o registro de consulta
        self.csv.loc[(self.csv['intent'] == "[CT]last_order") & (self.csv['query'].str.isdigit() == True), 'query'] = "Acompanhar a entrega do seu √∫ltimo Pedido"#1
        self.csv.loc[(self.csv['intent'] == "[CT]next_delivery") & (self.csv['query'].str.isdigit() == True), 'query'] = "Consultar a data da pr√≥xima entrega"#2
        self.csv.loc[(self.csv['intent'] == "[CT]bank_slip") & (self.csv['query'].str.isdigit() == True), 'query'] = "Consultar d√©bito ou segunda via de boleto"#3
        self.csv.loc[(self.csv['intent'] == "[CT]loyalty_program") & (self.csv['query'].str.isdigit() == True), 'query'] = "Consultar pontua√ß√£o do Meu Mundo [[COMPANY_NAME]]"#4
        self.csv.loc[(self.csv['intent'] == "action_menu_modelo_comercial") & (self.csv['query'].str.isdigit() == True), 'query'] = "Novo Modelo de Neg√≥cio [[COMPANY_NAME]]"#5
        self.csv.loc[(self.csv['intent'] == "[IT]other_subjects") & (self.csv['query'].str.isdigit() == True), 'query'] = "Outros assuntos"#6
        self.csv.loc[(self.csv['intent'] == "main_menu>missing_registry") & (self.csv['query'].str.isdigit() == True), 'query'] = "Consultar uma Revendedora da equipe"#6
        self.csv.loc[(self.csv['intent'] == "change_registry") & (self.csv['query'].str.isdigit() == True), 'query'] = "Alterar o registro de consulta"#7

        #O Novo Modelo de Neg√≥cio da [[COMPANY_NAME]] √© exclusivo para alguns Setores. Se voc√™ foi selecionada para fazer parte e quer conhecer mais, escolha uma das seguintes op√ß√µes:,
        #1 - Saiba o que √© o Novo Modelo de Neg√≥cio
        #2 - Conhe√ßa as mudan√ßas
        #3 - Informe-se sobre o seu n√≠vel
        #4 - Mais informa√ß√µes
        self.csv.loc[(self.csv['intent'] == "oque_e_novo_modelo_comercial") & (self.csv['query'].str.isdigit() == True), 'query'] = "Saiba o que √© o Novo Modelo de Neg√≥cio"#1
        self.csv.loc[(self.csv['intent'] == "oque_muda_novo_modelo_comercial") & (self.csv['query'].str.isdigit() == True), 'query'] = "Conhe√ßa as mudan√ßas"#2
        self.csv.loc[(self.csv['intent'] == "como_fico_sabendo_nivel") & (self.csv['query'].str.isdigit() == True), 'query'] = "Informe-se sobre o seu n√≠vel"#3
        self.csv.loc[(self.csv['intent'] == "como_saber_mais_novo_modelo_comercial") & (self.csv['query'].str.isdigit() == True), 'query'] = "Mais informa√ß√µes"#4

        #Olha, a gente pensou em tudo! A transforma√ß√£o come√ßa, inclusive, pela forma como voc√™ passa a ser chamada na [[COMPANY_NAME]]: Empreendedora! Sentiu o poder?ü•∞,J√° pensou em ter um plano de crescimento que te permita lucrar ainda mais com a venda dos nossos produtos?  Ent√£o, prepare-se! Olha s√≥ os novos n√≠veis que voc√™ poder√° alcan√ßar:,üëâüèªEmpreendedora Bronze
        #üëâüèªEmpreendedora Prata
        #üëâüèªEmpreendedora Ouro
        #üëâüèªEstrela VIP
        #üëâüèªEstrela Safira
        #üëâüèªEstrela Diamante
        #Quanto mais alto voc√™ chegar, mais vai lucrar!  ü§ë,Escolha um dos n√∫meros para ver a op√ß√£o:
        #1 - Voltar
        #2 - Menu principal
        self.csv.loc[(self.csv['intent'] == "action_menu_modelo_comercial") & (self.csv['query'].str.isdigit() == True), 'query'] = "Voltar"#1
        self.csv.loc[(self.csv['intent'] == "main_menu") & (self.csv['query'].str.isdigit() == True), 'query'] = "Menu principal"#2

        #Devolveu algum produto e tem cr√©dito com a [[COMPANY_NAME]]?  Voc√™ pode fazer o seguinte:
        #- acesse o site www.[[COMPANY_NAME]].com.br;
        #- clique em *Meus Pedidos*, depois em *Pagar Boleto*;
        #- no site, estar√° dispon√≠vel a op√ß√£o *Utilizar Cr√©ditos*.,Essa resposta resolveu a sua d√∫vida?,
        #1 - *Sim*
        #2 - *N√£o*
        self.csv.loc[(self.csv['intent'] == "[IT]survey>positive_rating") & (self.csv['query'].str.isdigit() == True), 'query'] = "Sim"#1
        self.csv.loc[(self.csv['intent'] == "[IT]survey>negative_rating") & (self.csv['query'].str.isdigit() == True), 'query'] = "Nao"#2

        #Meus Pedidos e depois ‚ÄúTrocas e Faltas‚Äù.  ;) 
        #1 - Quando realizar a troca
        #2 - Troca de tamanho
        #3 - Devolver caixa toda
        self.csv.loc[(self.csv['intent'] == "[IT]return_policy") & (self.csv['query'].str.isdigit() == True), 'query'] = "Quando realizar a troca"#1
        self.csv.loc[(self.csv['intent'] == "[IT]size_change") & (self.csv['query'].str.isdigit() == True), 'query'] = "Troca de tamanho"#2
        self.csv.loc[(self.csv['intent'] == "[IT]return_entire_box") & (self.csv['query'].str.isdigit() == True), 'query'] = "Devolver caixa toda"#3

        #Ao receber o pr√™mio, se voc√™ constatar qualquer defeito, dano ocasionado no transporte ou que n√£o se trata do produto resgatado, entre em contato com o Servi√ßo de Atendimento √† Revendedora no #### ### #### de segunda a s√°bado das ## √†s ## horas, e abra uma reclama√ß√£o para an√°lise e poss√≠vel substitui√ß√£o por outro produto similar em perfeitas condi√ß√µes.
        #Considere os seguintes prazos para abertura de reclama√ß√£o, ap√≥s o recebimento do pr√™mio:
        #- Defeito: 7 dias corridos;
        #- Recebimento de um pr√™mio danificado: Caso o produto recebido tenha sido danificado no transporte, recuse o recebimento e entre em contato com o  Servi√ßo de Atendimento √† Revendedora;
        #- Recebimento de item diferente do resgatado: ## dias corridos;
        #- Troca de voltagem:  ## dias corridos.,Essa resposta resolveu a sua d√∫vida?,
        #1 - *Sim*
        #2 - *N√£o*
        self.csv.loc[(self.csv['intent'] == "[IT]survey>positive_rating") & (self.csv['query'].str.isdigit() == True), 'query'] = "Sim"#1
        self.csv.loc[(self.csv['intent'] == "[IT]survey>negative_rating") & (self.csv['query'].str.isdigit() == True), 'query'] = "Nao"#2

        #_Meu Mundo [[COMPANY_NAME]]_ √© o programa de premia√ß√£o para revendedores [[COMPANY_NAME]]! :)
        #Envie o n√∫mero para saber mais:
        #1 - Consulta de pontos
        #2 - Resgate de pr√™mios
        #3 - Funcionamento do programa
        self.csv.loc[(self.csv['intent'] == "[CT]loyalty_program_menu>points") & (self.csv['query'].str.isdigit() == True), 'query'] = "Consulta de pontos"#1
        self.csv.loc[(self.csv['intent'] == "[IT]loyalty_program_menu>claim_prizes") & (self.csv['query'].str.isdigit() == True), 'query'] = "Resgate de pr√™mios"#2
        self.csv.loc[(self.csv['intent'] == "[IT]loyalty_program_menu>how_it_works") & (self.csv['query'].str.isdigit() == True), 'query'] = "Funcionamento do programa"#3

        #Que pena. üòû
        #Tente perguntar de novo, mas com outras palavras!
        #Se preferir, selecione um dos assuntos dessa lista.,
        #1 - Acompanhar Pedido
        #2 - Segunda via de boleto
        #3 - D√©bito n√£o baixou
        #4 - Folheto Digital
        self.csv.loc[(self.csv['intent'] == "main_menu") & (self.csv['query'].str.isdigit() == True), 'query'] = "Acompanhar Pedido"#3
        self.csv.loc[(self.csv['intent'] == "[CT]bank_slip") & (self.csv['query'].str.isdigit() == True), 'query'] = "Segunda via de boleto"#3
        self.csv.loc[(self.csv['intent'] == "[IT]survey") & (self.csv['query'].str.isdigit() == True), 'query'] = "D√©bito n√£o baixou"#3
        self.csv.loc[(self.csv['intent'] == "[CT]ebrochure") & (self.csv['query'].str.isdigit() == True), 'query'] = "Folheto Digital"#4

        #Qual das op√ß√µes abaixo voc√™ quer receber?,
        #1 - Imagens dos Lan√ßamentos
        #2 - Ofertas da Campanha
        #3 - Imagens da linha Moda&Casa
        self.csv.loc[(self.csv['intent'] == "[IT]campaign_memes>menu>releases") & (self.csv['query'].str.isdigit() == True), 'query'] = "Imagens dos Lan√ßamentos"#1
        self.csv.loc[(self.csv['intent'] == "[IT]campaign_memes>menu>sales") & (self.csv['query'].str.isdigit() == True), 'query'] = "Ofertas da Campanha"#2
        self.csv.loc[(self.csv['intent'] == "[IT]campaign_memes>menu>fashion_and_home") & (self.csv['query'].str.isdigit() == True), 'query'] = "Imagens da linha Moda&Casa"#3

        #O processo de entrega do seu Pedido √© muito simples e seguro! Cada Setor possui uma data programada para entrega dentro do hor√°rio comercial, das ##h## √†s ##h##, de segunda √† s√°bado, por meio de uma transportadora contratada pela [[COMPANY_NAME]].
        #No ato da entrega ser√° exigido um documento de identifica√ß√£o com foto e o entregador pode solicitar que voc√™ apresente o comprovante de pagamento do Pedido anterior para a libera√ß√£o da caixa, por isso, tenha sempre em m√£os o comprovante no momento da entrega.
        #Caso a entrega n√£o seja realizada devido falta de apresenta√ß√£o do comprovante de pagamento do Pedido anterior (quando solicitado pelo entregador),  aus√™ncia de um respons√°vel pelo recebimento no ato da entrega ou endere√ßo n√£o localizado, a caixa retornar√° para o dep√≥sito e ficar√° retida por 7 dias √∫teis aguardando que voc√™ fa√ßa a retirada.
        #Escolha um dos n√∫meros para ver a op√ß√£o:,
        #1 - Acompanhar pedido
        #2 - Quem pode receber a caixa
        #3 - Caixa voltou para [[COMPANY_NAME]]
        #4 - Receber comprovante na entrega
        self.csv.loc[(self.csv['intent'] == "main_menu") & (self.csv['query'].str.isdigit() == True), 'query'] = "Acompanhar pedido"#1
        self.csv.loc[(self.csv['intent'] == "[IT]who_can_receive_delivery") & (self.csv['query'].str.isdigit() == True), 'query'] = "Quem pode receber a caixa"#2
        self.csv.loc[(self.csv['intent'] == "[IT]my_box_returned") & (self.csv['query'].str.isdigit() == True), 'query'] = "Caixa voltou para [[COMPANY_NAME]]"#3
        self.csv.loc[(self.csv['intent'] == "action_comprovante_entrega_avon") & (self.csv['query'].str.isdigit() == True), 'query'] = "Receber comprovante na entrega"#4

        #Se voc√™ deixou de revender nossos produtos h√° mais de 1 ano e quer voltar a Revender [[COMPANY_NAME]] novamente, √© necess√°rio entrar no site [[COMPANY_NAME]] e clicar na op√ß√£o ""Revender"" no menu e preencher o cadastro. Uma Gerente de Setor entrar√° em contato com voc√™ para concluir seu novo cadastro.
        #Ir para o site: http://www.[[COMPANY_NAME]].com.br 
        #Agora, se voc√™ est√° sem revender nossos produtos h√° menos de 6 meses, entre em contato com o Servi√ßo de Atendimento √† Revendedora no #### ### #### de segunda a s√°bado das ## √†s ## horas, e siga as orienta√ß√µes para ser ativada novamente.
        #,Essa resposta resolveu a sua d√∫vida?,
        #1 - *Sim*
        #2 - *N√£o*
        self.csv.loc[(self.csv['intent'] == "[IT]survey>positive_rating") & (self.csv['query'].str.isdigit() == True), 'query'] = "sim"#1
        self.csv.loc[(self.csv['intent'] == "[IT]survey>negative_rating") & (self.csv['query'].str.isdigit() == True), 'query'] = "Nao"#2

        #A sua caixa pode voltar para a [[COMPANY_NAME]] nas seguintes situa√ß√µes:
        #- Aus√™ncia de um respons√°vel pelo recebimento;
        #- Falta de apresenta√ß√£o do comprovante de pagamento do Pedido anterior, quando solicitado pelo entregador;
        #- Endere√ßo n√£o localizado.
        #Para qualquer uma dessas situa√ß√µes, a caixa retornar√° para o dep√≥sito e ficar√° retida por 7 dias √∫teis aguardando que voc√™ fa√ßa a retirada. Para saber o endere√ßo do dep√≥sito da [[COMPANY_NAME]], entre em contato com o Servi√ßo de Atendimento √† Revendedora- #### ### #### ‚Äì de segunda a s√°bado, das ## √†s ## horas.
        #Se a sua caixa voltar para o dep√≥sito e voc√™ n√£o for retirar em at√© 7 dias √∫teis, ela ser√° desmanchada e n√£o e voc√™ n√£o conseguir√° mais  resgat√°-la üòî
        #Caso deseje, voc√™ pode acompanhar a entrega do seu √∫ltimo pedido por aqui, basta escrever o n√∫mero do item que quer informa√ß√£o:,
        #1 - Acompanhar pedido
        #2 - Outros assuntos
        self.csv.loc[(self.csv['intent'] == "main_menu") & (self.csv['query'].str.isdigit() == True) & (self.csv['response'] == 'Digite o *n√∫mero do seu registro cadastral* na [[COMPANY_NAME]] para conhecer as op√ß√µes de consulta.'), 'query'] = "Acompanhar pedido"#1
        self.csv.loc[(self.csv['intent'] == "[IT]other_subjects") & (self.csv['query'].str.isdigit() == True) & (self.csv['response'] == 'Ok, outros assuntos! Sobre o que voc√™ quer falar? Pode perguntar!'), 'query'] = "Outros assuntos"#2

        #Qualquer pessoa que esteja no seu endere√ßo de entrega e seja maior de ## anos. O respons√°vel pelo recebimento do Pedido deve assinar o documento de entrega com letra leg√≠vel, informando a data e o grau de parentesco ou relacionamento com voc√™.
        #Caso n√£o tenha ningu√©m no seu local de entrega e a caixa esteja liberada, o transportador pode entregar no vizinho da frente, da esquerda ou da direita, desde que a pessoa apresente um documento de identidade.
        #O transportador, ao deixar sua caixa para um determinado vizinho solicitar√° a assinatura do mesmo (letra leg√≠vel) e anotar√° no canhoto de entrega( Reconhecimento de D√≠vida) para quem foi entregue. Como parte do procedimento, deixar√° um bilhete no local com todas as informa√ß√µes.
        #Caso deseje, voc√™ pode acompanhar a entrega do seu √∫ltimo pedido por aqui, basta clicar no bot√£o abaixo:
        #,1 - Acompanhar pedido
        #2 - Outros assuntos
        self.csv.loc[(self.csv['intent'] == "[CT]last_order") & (self.csv['query'].str.isdigit() == True), 'query'] = "Acompanhar pedido"#2
        self.csv.loc[(self.csv['intent'] == "[IT]other_subjects") & (self.csv['query'].str.isdigit() == True), 'query'] = "Outros assuntos"#2

        #J√° faz 2 dias √∫teis que voc√™ pagou seu boleto e o d√©bito ainda n√£o baixou?
        #Mande o comprovante de pagamento para o e-mail [[E-MAIL]] A resposta vir√° em at√© 4 dias √∫teis. 
        #Se tiver mais d√∫vidas, ligue para #### ### #### de um telefone fixo. Este n√∫mero funciona de segunda a s√°bado, das 8h √†s ##h.
        #,Essa resposta resolveu a sua d√∫vida?,
        #1 - *Sim*
        #2 - *N√£o*
        self.csv.loc[(self.csv['intent'] == "[IT]survey>positive_rating") & (self.csv['query'].str.isdigit() == True), 'query'] = "Sim"#2
        self.csv.loc[(self.csv['intent'] == "[IT]survey>negative_rating") & (self.csv['query'].str.isdigit() == True), 'query'] = "N√£o"#2

        #Voc√™ quer receber as imagens de qual campanha?,
        #1 - Campanha atual
        #2 - Pr√≥xima campanha
        self.csv.loc[(self.csv['intent'] == "[IT]campaign_memes>menu") & (self.csv['query'].str.isdigit() == True), 'query'] = "Pr√≥xima campanha"#1
        self.csv.loc[(self.csv['intent'] == "[IT]campaign_memes>menu") & (self.csv['query'].str.isdigit() == True), 'query'] = "Pr√≥xima campanha"#2

        #Voc√™ pode lucrar muito revendendo [[COMPANY_NAME]]! Deixa eu te explicar como funciona a lucratividade:
        #- Para Folhetos Cosm√©ticos [[COMPANY_NAME]], a lucratividade sugerida √© de ##%;
        #- Para Folhetos Moda & Casa, a lucratividade sugerida √© de ##%;
        #- E ainda ofertas incr√≠veis, dedicadas exclusivamente para as nossas Revendedoras na Revista [[COMPANY_NAME]] & Voc√™, aonde voc√™ determina o quanto quer lucrar!
        #Escolha um dos n√∫meros para ver a op√ß√£o:,
        #1 - Pedido m√≠nimo
        #2 - Prazo de envio
        #3 - Limite de cr√©dito
        #4 - Rejei√ß√£o de pedido
        self.csv.loc[(self.csv['intent'] == "[IT]profitability>minimum_order") & (self.csv['query'].str.isdigit() == True), 'query'] = "Pedido m√≠nimo"#1
        self.csv.loc[(self.csv['intent'] == "[CT]profitability>site_closure") & (self.csv['query'].str.isdigit() == True), 'query'] = "Prazo de envio"#2
        self.csv.loc[(self.csv['intent'] == "[CT]profitability>credit_limit") & (self.csv['query'].str.isdigit() == True), 'query'] = "Limite de cr√©dito"#3
        self.csv.loc[(self.csv['intent'] == "[IT]profitability>rejected_order") & (self.csv['query'].str.isdigit() == True), 'query'] = "Rejei√ß√£o de pedido"#4
        print(self.csv)       

    def clean(self, thresold, bool_undefined, bool_confi, number, confi = None):
        if bool_undefined == 'yes':
          a = self.delete_undefined() 
          if len(a) > 0:
            self.csv = self.delete(a).reset_index(drop=True)
        
        if bool_confi =='yes':
          a = self.delete_confidence(confi)
          if len(a) > 0:
            self.csv = self.delete(a).reset_index(drop=True)
        
        a = self.delete_digits_in_query()
        if len(a) > 0:
          self.csv = self.delete(a).reset_index(drop=True)
        
        self.csv = self.single_conversation(number).reset_index(drop=True)

        a = self.delete_nan('response')
        if len(a) > 0:
          self.csv = self.delete(a).reset_index(drop=True)

        a = self.delete_nan('confidence')
        if len(a) > 0:
          self.csv = self.delete(a).reset_index(drop=True)

        counter, labels, clases = self.basic()
        inte = self.delete_thresold(thresold, counter, clases)
        a = self.clear_index(inte)
        if len(a) > 0:
          self.csv = self.delete(a).reset_index(drop=True)

        self.csv = self.change_intent_to_digit()
        
        return self.csv.reset_index(drop=True)
        
    def delete_undefined(self):
        intent = self.csv['intent'].tolist()
        list_unde = [index for index,item in enumerate(intent) if item == 'not_understood']
        a = []
        for i in list_unde:
          _,_,_,_,_,_,user,session = self.csv.iloc[i]
          list_index = np.asarray(np.where((self.csv.user == user) & (self.csv.session == session)))[0]
          a.append(list_index)
        return a   

    def delete_confidence(self, confi):
        confidence = self.csv['confidence'].tolist()
        list_confi = [index for index,item in enumerate(confidence) if item < confi]
        a = []
        for i in list_confi:
          _,_,_,_,_,_,user,session = self.csv.iloc[i]
          list_index = np.asarray(np.where((self.csv.user == user) & (self.csv.session == session)))[0]
          a.append(list_index)   
        return a 
    
    def delete_digits_in_query(self):
        messages = self.csv['query'].tolist()
        numbers = [index for index,item in enumerate(messages) if item.isdigit() == True]
        a = []
        return self.clear_numbers(numbers, a)

    def delete_thresold(self, thresold, counter, clases):
        inte = []
        for i in counter:
          if int(counter[i]) < thresold:
            inte.append(i)
        return [clases[i] for i in inte]
    
    def basic(self):
        labels = self.csv['intent'].tolist()
        clases = list(set(labels))
        labels = [clases.index(intent) for intent in labels]
        print('basic')
        counter = collections.Counter(labels)
        print(counter, labels, clases)
        return counter, labels, clases

    def clear_numbers(self, numbers, a):
        for i in numbers:
            _,_,_,_,_,_,user,session = self.csv.iloc[i]
            list_index = np.asarray(np.where((self.csv.user == user) & (self.csv.session == session)))[0]
            a.append(list_index)
        return a
        
    def clear_index(self, inte):
        a = []
        for index, row in self.csv.iterrows():
            _,intnt,_,_,_,_,user,session = self.csv.iloc[index]
            if intnt in inte:
                list_index = np.asarray(np.where((self.csv.user == user) & (self.csv.session == session)))[0]
                a.append(list_index)
        return a

    def delete_nan(self, atributo):
        a = self.csv[self.csv[atributo].isnull()]
        b = []
        for index, row in a.iterrows():
          _,intnt,_,_,_,_,user,session = self.csv.iloc[index]
          list_index = np.asarray(np.where((self.csv.user == user) & (self.csv.session == session)))[0]
          b.append(list_index)
        return b

    def change_intent_to_digit(self):
        labels = self.csv['intent'].tolist()
        clases = list(set(labels))
        self.csv = self.csv[self.csv.intent.isin(self.csv.intent.value_counts().tail(len(clases)).index)].copy() # select numer of clases low dimensional categories
        map_label = dict(enumerate(self.csv.intent.factorize()[1]))
        self.csv['intent'] = self.csv.intent.factorize()[0]
        return self.csv

    def delete(self, a):
        b = [j for i in a for j in i]
        c = list(set(b))
        print('cantidad de mensajes a eliminar', len(c))
        for l in c:
            self.csv.drop(l, inplace=True)
        print(self.csv)
        counter, labels, clases = self.basic()
        self.csv.reset_index(drop=True)
        return self.csv  

    def single_conversation(self, number):
        b = []
        for index, row in self.csv.iterrows():
            _,_,_,_,_,_,user,session = self.csv.iloc[index]
            list_index = np.asarray(np.where((self.csv.user == user) & (self.csv.session == session)))[0]
            b.append(list_index)
            
        b = list(map(list, OrderedDict.fromkeys(map(tuple, b)).keys()))
        to_delete = [w for w in b if len(w) < number]
        
        self.csv = self.delete(to_delete)
        self.csv.reset_index(drop=True)

        return self.csv

class Preprocessing(object):
    ''' Perform preprocessing steps on dataset. '''

    def __init__(self):
        self.stop_words = nltk.corpus.stopwords.words('english')
        self.stemmer = PorterStemmer()
        self.lemmatizer = WordNetLemmatizer()
        self.stops_english = get_stop_words('english')
        self.stops_portuguese = get_stop_words('portuguese')
        self.stops_spanish = get_stop_words('spanish')
        self.is_english = set(nltk.corpus.words.words())

    def remove_null(self, dataframe):
        ''' Helper function to remove NA values. '''
        dataframe = dataframe.dropna(axis = 0, how = 'any')
        return dataframe

    def preprocess_text(self, text_area):
        ''' Function to preprocess text data. Steps taken are:
            1. Tokenization
            2. Removal of any non alphanumeric character
            3. Lowercase words
            4. Removal of stop words
            5. Bigram / Trigram collocation detection (/frequently co-occurring tokens) using Gensim's Phrases
            6. Lemmatization (not stemming to avoid reduction of interpretability
            Parameters: list of strings
            ----------
            Returns: Preprocessed list of strings.
            -------
        '''
        #text_area = [line.encode('utf-8') for line in text_area] # for encoding problems
        text_area = [word_tokenize(line) for line in text_area] # tokenization
        #text_area = [[word for word in line if len(word) > 1] for line in text_area] # remove single character strings
        text_area = [[word for word in line if word.isalnum()] if len([word for word in line if word.isalnum()]) > 0 else line for line in text_area] # remove punctuation
        text_area = [[word.lower() for word in line] if len([word.lower() for word in line]) else line for line in text_area] #lowercase
        text_area = [[word for word in line if not word in self.stops_portuguese] if len([word for word in line if not word in self.stops_portuguese]) > 0 else line for line in text_area]# remove Portuguese stopwords        
        #text_area = [line for line in text_area if line != []]
        text_area = self.make_n_grams(text_area, n_gram = 'bigram') # bigram
        text_area = self.make_n_grams(text_area, n_gram = 'trigram') # trigram
        text_area = self.pruning(text_area, 'lemmatization') # prune words using lemmatization
        text_area = [" ".join(str(x) for x in i) for i in text_area]
        print(len(text_area))
        return text_area

    def pruning(self, text_area, pruning_method = ''):
        ''' Prune words to reduce them to their most basic form. '''
        if pruning_method == 'stemming':
            text_area = [[self.stemmer.stem(word) for word in line] for line in text_area]
        elif pruning_method == 'lemmatization':
            text_area = [[self.lemmatizer.lemmatize(word) for word in line] for line in text_area]
        else:
            raise ValueError('Please set pruning_method to "stemming" or "lemmatization".')
        return text_area

    def make_n_grams(self, text_area, n_gram = ''):
        # build bigram/trigram models
        bigram = gensim.models.Phrases(text_area, min_count = 5, threshold = 100)
        trigram = gensim.models.Phrases(bigram[text_area], threshold = 100)
        # faster way to get a sentence clubbed as a bigram/trigram
        bigram_mod = gensim.models.phrases.Phraser(bigram)
        trigram_mod = gensim.models.phrases.Phraser(trigram)
        if n_gram == 'bigram':
            return [bigram_mod[doc] for doc in text_area]
        elif n_gram == 'trigram':
            return [trigram_mod[bigram_mod[doc]] for doc in text_area]

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("path", type=str, help="Dataset path (*.csv)")
    parser.add_argument("destino_path", type=str, help="Path to save the file (*.csv)")
    args = parser.parse_args()
    
    path = args.path
    destino_path = args.destino_path
    #read csv  
    csv = pd.read_csv(path)
    #csv = clean_csv(csv).clean(600,'not', 'not', confi = None)
    #csv = clean_csv(csv).clean(600,'yes', 'not', confi = None)
    csv = clean_csv(csv).clean(700,'yes', 'yes',3, confi = 0.65)
    csv = csv.reset_index(drop=True)
    
    #preprocessing each list
    p1 = Preprocessing()
    lista_query = p1.preprocess_text(csv['query'].tolist())
    lista_response = p1.preprocess_text([str(i) for i in csv['response'].tolist()])
    
    #delete query and response columns
    csv.drop(['query', 'response'], axis=1, inplace=True)
    #add query and response columns
    csv['query'] = lista_query
    csv['response'] = lista_response
    csv = csv.reset_index(drop=True)
    #save csv file
    csv.to_csv(destino_path + 'dataset_confidence_065__3.csv', index=False)
    
if __name__ == "__main__":
    main()

'''
path = '/content/full.csv'

csv = pd.read_csv(path)

p = clean_csv(csv).clean(600)


p = Preprocessing()

text = ["Brasil! Mostra tua cara  Quero ver quem paga Pra gente ficar assim  Brasil! Qual √© o teu neg√≥cio? O nome do teu s√≥cio? Confia em mim", "Brasil! Mostra tua cara  Quero ver quem paga Pra gente ficar assim  Brasil! Qual √© o teu neg√≥cio? O nome do teu s√≥cio? Confia em mim",'Consultar a posi√ß√£o de entrega do √∫ltimo pedido',"Fant√°stico! Seu pedido j√° est√° na transportadora. Voc√™ receber√° at√© o dia ##/##/####,Escreva *o n√∫mero* da op√ß√£o desejada,1 - Acompanhar a entrega do seu √∫ltimo Pedido 2 - Consultar a data da pr√≥xima entrega 3 - Consultar d√©bito ou segunda via de boleto 4 - Consultar pontua√ß√£o do Meu Mundo [[COMPANY_NAME]] 5 - Novo Modelo de Neg√≥cio [[COMPANY_NAME]] 6 - Outros assuntos 7 - Alterar o registro de consulta", ' ']

preprocess_text = p.preprocess_text(text)


'''